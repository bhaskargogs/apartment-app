<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			 http://www.springframework.org/schema/security 
                    http://www.springframework.org/schema/security/spring-security-3.2.xsd">
                    
    <!-- <security:global-method-security pre-post-annotations="enabled" proxy-target-class="true"/>  -->              
	<!-- This is where we configure Spring-Security  -->
 	<security:http auto-config="true" use-expressions="true" access-denied-page="/apartment/denied" >
		<security:intercept-url pattern="/apartment/auth" access="permitAll"/>
		<security:intercept-url pattern="/apartment/invalidLogin" access="permitAll"/>
		<security:intercept-url pattern="/apartment/register" access="isAnonymous()"/>
		<security:intercept-url pattern="/apartment/kill" access="hasRole('Seller')"/>
		<!-- <security:intercept-url pattern="/bank/**" access="hasRole('customer')"/> -->
		 <security:intercept-url pattern="/apartment/**" access="hasAnyRole('Buyer','Seller')"/> 
		
		<security:form-login login-page="/apartment/auth"
				authentication-failure-url="/apartment/invalidLogin" 
				default-target-url="/apartment/homePage"/>
		
		<security:logout invalidate-session="true" logout-success-url="/apartment/auth" logout-url="/apartment/logout"/>		
		
		
	</security:http>
	
	<!-- Declare an authentication-manager to use a custom userDetailsService -->
	<security:authentication-manager>
	        <security:authentication-provider user-service-ref="UserSecurityAuthProvider"><!--
	        		<security:password-encoder ref="passwordEncoder"/>
	        --></security:authentication-provider>
	</security:authentication-manager>
	
	<!-- Use a Md5 encoder since the user's passwords are stored as Md5 in the database -->
	<bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder"/>

	<!-- A custom service where Spring will retrieve users and their corresponding access levels  -->
<!-- 	<bean id="customUserDetailsService" class="com.ez.spring.security.CustomUserDetailsService">
	   <property name="adminDaoEm"  ref="adminDaoEmImpl"/>
	</bean> -->
	
</beans>
